// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  clerkUserId   String    @unique
  email         String    @unique
  name          String?
  role          UserRole  @default(JOB_SEEKER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  experiences   Experience[]
  education     Education[]
  skills        Skill[]
  projects      Project[]
  applications  Application[]
  jobPostings   JobPosting[]
}

model Profile {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio           String?
  location      String?
  phoneNumber   String?
  websiteUrl    String?
  linkedinUrl   String?
  githubUrl     String?
  twitterUrl    String?
  languages     Language[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Experience {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobTitle    String
  company     String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Education {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  institution   String
  degree        String
  fieldOfStudy  String
  startDate     DateTime
  endDate       DateTime?
  grade         String?
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Skill {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  level     SkillLevel
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String
  url         String?
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Language {
  id        String       @id @default(cuid())
  profileId String
  profile   Profile      @relation(fields: [profileId], references: [id], onDelete: Cascade)
  name      String
  level     LanguageLevel
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model JobPosting {
  id              String    @id @default(cuid())
  title           String
  description     String
  company         String
  location        String
  salary          Float?
  requirements    String[]
  jobType         JobType
  experienceLevel ExperienceLevel
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications    Application[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Application {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobPostingId  String
  jobPosting    JobPosting @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
  status        ApplicationStatus @default(PENDING)
  coverLetter   String    @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum UserRole {
  JOB_SEEKER
  EMPLOYER
  ADMIN
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  INTERVIEWED
  OFFERED
  REJECTED
  ACCEPTED
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  REMOTE
}

enum ExperienceLevel {
  ENTRY
  MID
  SENIOR
  EXECUTIVE
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum LanguageLevel {
  ELEMENTARY
  LIMITED_WORKING
  PROFESSIONAL_WORKING
  FULL_PROFESSIONAL
  NATIVE_BILINGUAL
}